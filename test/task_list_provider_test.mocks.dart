// Mocks generated by Mockito 5.3.0 from annotations
// in todo_manager/test/task_list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_manager/models/task_model.dart' as _i3;
import 'package:todo_manager/repositories/tasks_controller.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskController extends _i1.Mock implements _i2.TaskController {
  MockTaskController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool checkChanges(List<_i3.Task>? localTasks, List<_i3.Task>? serverTasks) =>
      (super.noSuchMethod(
          Invocation.method(#checkChanges, [localTasks, serverTasks]),
          returnValue: false) as bool);
  @override
  _i4.Future<List<_i3.Task>?> checkTasks(
          List<_i3.Task>? remoteTasks, int? revision) =>
      (super.noSuchMethod(
              Invocation.method(#checkTasks, [remoteTasks, revision]),
              returnValue: _i4.Future<List<_i3.Task>?>.value())
          as _i4.Future<List<_i3.Task>?>);
  @override
  List<_i3.Task> getLocalTasks() =>
      (super.noSuchMethod(Invocation.method(#getLocalTasks, []),
          returnValue: <_i3.Task>[]) as List<_i3.Task>);
  @override
  _i4.Future<List<_i3.Task>?> getTasks() =>
      (super.noSuchMethod(Invocation.method(#getTasks, []),
              returnValue: _i4.Future<List<_i3.Task>?>.value())
          as _i4.Future<List<_i3.Task>?>);
  @override
  _i4.Future<List<_i3.Task>?> addTask(_i3.Task? task) =>
      (super.noSuchMethod(Invocation.method(#addTask, [task]),
              returnValue: _i4.Future<List<_i3.Task>?>.value())
          as _i4.Future<List<_i3.Task>?>);
  @override
  _i4.Future<List<_i3.Task>?> editTask(_i3.Task? task) =>
      (super.noSuchMethod(Invocation.method(#editTask, [task]),
              returnValue: _i4.Future<List<_i3.Task>?>.value())
          as _i4.Future<List<_i3.Task>?>);
  @override
  _i4.Future<List<_i3.Task>?> deleteTask(_i3.Task? task) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [task]),
              returnValue: _i4.Future<List<_i3.Task>?>.value())
          as _i4.Future<List<_i3.Task>?>);
}
